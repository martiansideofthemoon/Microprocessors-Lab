C51 COMPILER V9.53.0.0   TIMER_SOFT                                                        09/19/2016 17:02:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TIMER_SOFT
OBJECT MODULE PLACED IN timer_soft.obj
COMPILER INVOKED BY: C:\Keil123\C51\BIN\C51.exe modules\timer_soft\timer_soft.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\
                    -;.\;.\) DEFINE(KEIL) DEBUG OBJECTEXTEND PRINT(.\timer_soft.lst) TABS(2) OBJECT(timer_soft.obj)

line level    source

   1          /*C**************************************************************************
   2          * NAME:         timer_soft.c
   3          *----------------------------------------------------------------------------
   4          * Copyright (c) 2004 Atmel.
   5          *----------------------------------------------------------------------------
   6          * RELEASE:      c5131-usb-cdc-1_2_1      
   7          * REVISION:     1.10     
   8          *----------------------------------------------------------------------------
   9          * PURPOSE: 
  10          * This file controls the temporizations of the application. 
  11          * The tempo value is a define symbol in c51_time.h file.
  12          * The oscillator value is a parameter in c51_time.h file.
  13          *****************************************************************************/
  14          
  15          /*_____ I N C L U D E S ____________________________________________________*/
  16          #include "config.h"
  17          #include "timer_soft.h"
  18          
  19          /*_____ M A C R O S ________________________________________________________*/
  20          
  21          
  22          /*_____ D E F I N I T I O N S ______________________________________________*/
  23          /*V**************************************************************************
  24          * NAME: gl_soft_timer_tick
  25          *----------------------------------------------------------------------------
  26          * PURPOSE: 
  27          * Number of ms since mcu reset.
  28          * This variable is used by soft timers, it must be updated periodically (usually
  29          * by timer interrupt routine).
  30          *****************************************************************************/
  31          volatile Uint32 data gl_soft_timer_tick;
  32          
  33          /*_____ D E C L A R A T I O N S ____________________________________________*/
  34          void update_timer_soft (void);
  35          
  36          /*F**************************************************************************
  37          * NAME: tempo
  38          *----------------------------------------------------------------------------
  39          * PARAMS:
  40          * delay: tempo value in ms
  41          * return:   none
  42          *----------------------------------------------------------------------------
  43          * PURPOSE: 
  44          * This function manages the temporization.
  45          *----------------------------------------------------------------------------
  46          * EXAMPLE:
  47          * tempo(TIMER_1_S); // Wait 1 sec.
  48          *----------------------------------------------------------------------------
  49          * NOTE: 
  50          *----------------------------------------------------------------------------
  51          * REQUIREMENTS: 
  52          *****************************************************************************/
  53          void tempo(Uint16 delay)
  54          {
C51 COMPILER V9.53.0.0   TIMER_SOFT                                                        09/19/2016 17:02:23 PAGE 2   

  55   1      register Timer16s   timer;
  56   1      
  57   1      timer=set_timer16s(delay);
  58   1      if (!EA) // Bug ! ==> infinite loop because no update of clock under IT
  59   1        while (!std_timeout16s(timer)) timer_soft_update_task ();
  60   1      else while (!std_timeout16s(timer));
  61   1      }
  62          
  63          
  64          #ifndef I_HAVE_SETUP_SOFT_TIMER_TICK
  65          Uint16 gl_reminder_inc_ms;
  66          
  67          #ifdef SOFT_TIMER_CUSTOM_FOSC
              Uint16  REMINDER_INC_MS;
              
              /*F**************************************************************************
              * NAME: reload_TH0
              *----------------------------------------------------------------------------
              * PARAMS:
              * return:   value to load on TH0
              *----------------------------------------------------------------------------
              * PURPOSE: 
              * This function calculate the value to load in TH0 when FOSC is custom (FOSC
              * is not a precomputed value).
              * This function update REMINDER_INC_MS to keep accuracy of timers.
              *----------------------------------------------------------------------------
              * EXAMPLE:
              *----------------------------------------------------------------------------
              * NOTE: 
              *----------------------------------------------------------------------------
              * REQUIREMENTS: 
              *****************************************************************************/
              Byte reload_TH0(void)
              {
              Byte b;
              Byte n;
              
              REMINDER_INC_MS=((Uint16)FOSC/(Uint16)12*(Uint16)INC_MS);
              b=(REMINDER_INC_MS>>8);
                   if (b&128) b=0;
              else if (b&64)  b=128;
              else if (b&32)  b=192;
              else if (b&16)  b=224;
              else if (b&8)   b=240;
              else if (b&4)   b=248;
              else if (b&2)   b=252;
              else if (b&1)   b=254;
              else            b=255;
              REMINDER_INC_MS=((Uint16)b<<8)-REMINDER_INC_MS;
              // Do REMINDER_INC_MS*12*65536/FOSC with the maximum accuracy<=>REMINDER_INC_MS*3*2^18/FOSC
              for (n=0;n<18;n++)
                {
                if (REMINDER_INC_MS&32768)
                  {
                  REMINDER_INC_MS/=FOSC;
                  REMINDER_INC_MS*=3;
                  }
                else REMINDER_INC_MS<<=1;
                }
              return b;
              }
              #endif
C51 COMPILER V9.53.0.0   TIMER_SOFT                                                        09/19/2016 17:02:23 PAGE 3   

 117          
 118          
 119          /*F**************************************************************************
 120          * NAME: init_soft_timers
 121          *----------------------------------------------------------------------------
 122          * PARAMS:
 123          * return:   none
 124          *----------------------------------------------------------------------------
 125          * PURPOSE:
 126          * This function initialise the soft timer library.  
 127          *----------------------------------------------------------------------------
 128          * EXAMPLE:
 129          * init_soft_timer();
 130          *----------------------------------------------------------------------------
 131          * NOTE: 
 132          *----------------------------------------------------------------------------
 133          * REQUIREMENTS: 
 134          *****************************************************************************/
 135          void init_soft_timers (void)
 136          {
 137   1      gl_soft_timer_tick=0;
 138   1      gl_reminder_inc_ms=0;
 139   1      TL0 = 0;
 140   1      TH0 = RELOAD_TH0;
 141   1      TMOD |= 0x01; // timer0 is mode1 : 16 bits
 142   1      Set_timer0_x1_mode(); // timer0 always in x1 mode, even if x2 mode is set for std clk.
 143   1      TR0=1;
 144   1      ET0=1;
 145   1      }
 146          
 147          /*F**************************************************************************
 148          * NAME: timer_soft_update_task
 149          *----------------------------------------------------------------------------
 150          * PARAMS:
 151          * return:   none
 152          *----------------------------------------------------------------------------
 153          * PURPOSE: 
 154          * 
 155          *----------------------------------------------------------------------------
 156          * EXAMPLE:
 157          *----------------------------------------------------------------------------
 158          * NOTE: 
 159          *----------------------------------------------------------------------------
 160          * REQUIREMENTS: 
 161          *****************************************************************************/
 162          void timer_soft_update_task (void) 
 163          {
 164   1      if(!EA && TF0) update_timer_soft();
 165   1      }
 166          
 167          
 168          /*F**************************************************************************
 169          * NAME: update_timer_soft
 170          *----------------------------------------------------------------------------
 171          * PARAMS:
 172          * return:   none
 173          *----------------------------------------------------------------------------
 174          * PURPOSE: 
 175          * This function is the interrupt program for the timer 0.
 176          *----------------------------------------------------------------------------
 177          * EXAMPLE:
 178          *----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   TIMER_SOFT                                                        09/19/2016 17:02:23 PAGE 4   

 179          * NOTE: 
 180          *----------------------------------------------------------------------------
 181          * REQUIREMENTS: 
 182          *****************************************************************************/
 183          Interrupt (void update_timer_soft(void) ,IRQ_T0)
 184          {
 185   1      TF0 = 0; // for interrupt & polling mode, do not assum TF0 cleared by hardware !
 186   1      // TIMER0_OVF, interrupt cleared by hardware
 187   1      TH0|=RELOAD_TH0; // Update Physical Clock ( logical OR to keep accuracy after long IT )
 188   1      // Update gl_soft_timer_tick : number of ms till Reset, REMINDER_INC_MS to keep accuracy
 189   1      gl_soft_timer_tick+=(((gl_reminder_inc_ms+=REMINDER_INC_MS)<REMINDER_INC_MS)?INC_MS+1:INC_MS);
 190   1      }
 191          #endif
 192          
 193          
 194          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    220    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
