C51 COMPILER V9.53.0.0   USB_TASK                                                          09/19/2016 17:02:22 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE USB_TASK
OBJECT MODULE PLACED IN usb_task.OBJ
COMPILER INVOKED BY: C:\Keil123\C51\BIN\C51.exe usb_task.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\;.\;.\) DEFINE(KEIL) 
                    -DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*C**************************************************************************
   2          * NAME:         usb_task.c
   3          *----------------------------------------------------------------------------
   4          * Copyright (c) 2004 Atmel.
   5          *----------------------------------------------------------------------------
   6          * RELEASE:      c5131-usb-cdc-1_2_1      
   7          * REVISION:     1.6     
   8          *----------------------------------------------------------------------------
   9          * PURPOSE: 
  10          * This file controls the USB protocol.
  11          *****************************************************************************/
  12          /*_____ I N C L U D E S ____________________________________________________*/
  13          
  14          #include "config.h"
  15          #include "usb_task.h"
  16          #include "lib_mcu\usb\usb_drv.h"
  17          #include "lib_mcu\usb\uart_usb_lib.h"
  18          #include "lib_mcu\uart\uart_lib.h"
  19          #include "modules\usb_cdc_enum\usb_cdc_enum.h"
  20          #include "modules\timer_soft\timer_soft.h"
  21          
  22          #ifdef HELLO_WORLD_DEMO
  23          #include <stdio.h>                /* prototype declarations for I/O functions */
  24          #endif
  25          
  26          /*_____ M A C R O S ________________________________________________________*/
  27          
  28          /*_____ D E F I N I T I O N ________________________________________________*/
  29          
  30          bit   usb_connected;
  31          bit   flush_next_time;
  32          Uchar usb_sof_counter;
  33          
  34          extern Uchar tx_counter;
  35                 Uchar last_tx_counter;
  36          
  37          Uchar          buff[5];
  38          Uchar          uart_usb_index;
  39          
  40          extern         Uchar  usb_configuration_nb;
  41          extern         bit    usb_flush_allowed;
  42          #ifndef NO_SUPPORT_USB_PING_PONG
              bdata bit   rx_bank;
              #endif
  45          
  46          
  47          /*_____ D E C L A R A T I O N ______________________________________________*/
  48          
  49          /*F**************************************************************************
  50          * NAME: usb_task_init
  51          *----------------------------------------------------------------------------
  52          * PARAMS:
  53          * delay:    none
  54          * return:   none
C51 COMPILER V9.53.0.0   USB_TASK                                                          09/19/2016 17:02:22 PAGE 2   

  55          *----------------------------------------------------------------------------
  56          * PURPOSE: 
  57          * This function initializes the USB controller and the associated variables.
  58          *----------------------------------------------------------------------------
  59          * EXAMPLE:
  60          *----------------------------------------------------------------------------
  61          * NOTE: 
  62          *----------------------------------------------------------------------------
  63          * REQUIREMENTS: 
  64          *****************************************************************************/
  65          void usb_task_init(void)
  66          { 
  67   1        configure_usb_clock();
  68   1        Usb_enable();
  69   1        Usb_detach();
  70   1        tempo(TIMER_5_MS);
  71   1        Usb_attach();
  72   1      
  73   1        usb_configure_endpoint(EP_CONTROL, CONTROL);
  74   1        usb_reset_endpoint(EP_CONTROL);
  75   1      
  76   1        usb_var_init();
  77   1      
  78   1        Configure_led(0,LED_PORT_2MA);
  79   1        Configure_led(1,LED_PORT_2MA);
  80   1        Configure_led(2,LED_PORT_2MA);
  81   1        Configure_led(3,LED_PORT_2MA);
  82   1      
  83   1        Led_all_off();
  84   1      
  85   1        uart_init();
  86   1        uart_usb_init();
  87   1        last_tx_counter = 0;
  88   1        uart_usb_index = 0;
  89   1        usb_connected = TRUE;
  90   1      #ifndef NO_SUPPORT_USB_PING_PONG
                rx_bank = 0; 
              #endif
  93   1      }
  94          
  95          
  96          /*F**************************************************************************
  97          * NAME: usb_task
  98          *----------------------------------------------------------------------------
  99          * PARAMS:
 100          * delay:    none
 101          * return:   none
 102          *----------------------------------------------------------------------------
 103          * PURPOSE: 
 104          * This function manages the USB communication
 105          *----------------------------------------------------------------------------
 106          * EXAMPLE:
 107          *----------------------------------------------------------------------------
 108          * NOTE: 
 109          *----------------------------------------------------------------------------
 110          * REQUIREMENTS: 
 111          *****************************************************************************/
 112          void usb_task(void)
 113          {
 114   1      #ifndef HELLO_WORLD_DEMO
              Uchar j;
              #endif
C51 COMPILER V9.53.0.0   USB_TASK                                                          09/19/2016 17:02:22 PAGE 3   

 117   1        if (!usb_connected)
 118   1        {
 119   2          if (Usb_resume())
 120   2          {
 121   3            Usb_clear_suspend_clock();
 122   3            usb_connected = TRUE;
 123   3            Usb_clear_suspend();
 124   3            Usb_clear_resume();
 125   3            Usb_clear_sof();
 126   3            Led_3_off();
 127   3          }
 128   2        }
 129   1        else
 130   1        {
 131   2          if (Usb_suspend())
 132   2          {
 133   3            usb_connected = FALSE;
 134   3            Led_all_off();
 135   3            Led_3_on();
 136   3            Usb_clear_suspend();
 137   3            Usb_set_suspend_clock();
 138   3          }
 139   2          if (Usb_reset())
 140   2          { 
 141   3            usb_var_init();
 142   3            Usb_clear_reset();
 143   3            Led_0_off(); Led_1_off(); Led_2_off();
 144   3            uart_usb_init();
 145   3            last_tx_counter = 0;
 146   3            uart_usb_index = 0;
 147   3      #ifndef NO_SUPPORT_USB_PING_PONG
                    rx_bank = 0; 
              #endif
 150   3      
 151   3          }
 152   2      
 153   2          if (Usb_sof())
 154   2          {
 155   3            if (last_tx_counter == tx_counter)
 156   3            {
 157   4              uart_usb_flush();
 158   4            }
 159   3            last_tx_counter = tx_counter;
 160   3            usb_sof_counter ++;
 161   3            if (usb_sof_counter == 0x00)
 162   3            {
 163   4              Led_0_toggle();
 164   4            }
 165   3            Usb_clear_sof();
 166   3          }
 167   2      
 168   2          if (Usb_endpoint_interrupt())
 169   2          {
 170   3            Usb_select_ep(EP_CONTROL);
 171   3            if (Usb_setup_received()) { usb_enumeration_process(); }
 172   3      
 173   3            Usb_select_ep(3);
 174   3            if (Usb_tx_complete())    { Usb_clear_tx_complete();   }
 175   3          }
 176   2        }
 177   1      
 178   1      #ifndef HELLO_WORLD_DEMO                  /* USB <-> RS 232 demo */
C51 COMPILER V9.53.0.0   USB_TASK                                                          09/19/2016 17:02:22 PAGE 4   

                if (uart_test_hit())
                {
                  Led_1_on();
                  buff[uart_usb_index++]=uart_getchar();
                  if (uart_usb_tx_ready())
                  {
                    for (j=0;j<uart_usb_index;j++) {uart_usb_putchar (buff[j]);}
                    uart_usb_index=0;
                  }
              
                  Led_1_off();
                }
              
                if (Uart_tx_ready())
                {
                  if (uart_usb_test_hit()) { Led_2_on(); uart_putchar(uart_usb_getchar()); Led_2_off(); }
                }
              #else                                     /* HELLO WORLD demo */
 197   1      
 198   1        if (P3_2 == 0)
 199   1        {
 200   2          Led_1_toggle();             /* Toggle LED 0 each time we print */
 201   2          printf ("Hello World\r\n");   /* Print "Hello World" */
 202   2      
 203   2        }
 204   1      
 205   1        if (test_hit())
 206   1        { putchar (_getkey()); }
 207   1      
 208   1      #endif
 209   1      
 210   1      }
 211          
 212          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    247    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
