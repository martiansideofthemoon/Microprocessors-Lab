C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART_LIB
OBJECT MODULE PLACED IN uart_lib.obj
COMPILER INVOKED BY: C:\Keil123\C51\BIN\C51.exe lib_mcu\uart\uart_lib.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\;.\;.\) 
                    -DEFINE(KEIL) DEBUG OBJECTEXTEND PRINT(.\uart_lib.lst) TABS(2) OBJECT(uart_lib.obj)

line level    source

   1          /*C**************************************************************************
   2          * NAME:         uart_lib.c
   3          *----------------------------------------------------------------------------
   4          * Copyright (c) 2004 Atmel.
   5          *----------------------------------------------------------------------------
   6          * RELEASE:      c5131-usb-cdc-1_2_1      
   7          * REVISION:     1.20.8.1     
   8          *----------------------------------------------------------------------------
   9          * PURPOSE: 
  10          * This file provides a minimal VT100 terminal access through UART
  11          * and compatibility with Custom I/O support
  12          *****************************************************************************/
  13          
  14          /*_____ I N C L U D E S ____________________________________________________*/
  15          #include "config.h"
  16          #include "uart_lib.h"
  17          
  18          
  19          /*_____ G L O B A L    D E F I N I T I O N _________________________________*/
  20          /*V**************************************************************************
  21          * NAME: uart_hit
  22          *----------------------------------------------------------------------------
  23          * PURPOSE: 
  24          * Latch of RI: something is received
  25          *****************************************************************************/
  26          volatile bit uart_hit;
  27          long int  brg2_init;
  28          #ifdef LOGO_ATMEL
              /*V**************************************************************************
              * NAME: txt_logo_atmel
              *----------------------------------------------------------------------------
              * PURPOSE: 
              * Add some bytes of code for standard logo string.
              * If LOGO_ATMEL is defined: ASCII Art of Atmel Logo + Release name
              * Else: Release name
              *----------------------------------------------------------------------------
              * NOTE: 
              * CODE_MEM (memory location identifier) to be defined
              *****************************************************************************/
              char _ConstType_ txt_logo_atmel[]="\n\
                      _____________________________\n\
                    /___   ________________________|\n\
                   ___  | |  ________    ____   _\n\
                  /   | | | |  _   _ \\  |  __| | |\n\
                 / /| | | | | | | | | | | |__  | |\n\
                / / | | | | | | | | | | |  __| | |\n\
               / /_ | | | | | | | | | | | |__  | |__\n\
              /____||_| |_| |_| |_| |_| |____| |___/\n\
               ___________________________________\n\
              |__________________________________/ (R)\n\
              c5131-usb-cdc-1_2_1\n\n";
              #else
  53          char _ConstType_ txt_logo_atmel[]="Atmel (R)\nc5131-usb-cdc-1_2_1\n\n";
  54          #endif
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 2   

  55          
  56          /*_____ D E F I N I T I O N ________________________________________________*/
  57          
  58          /*_____ M A C R O S ________________________________________________________*/
  59          #ifndef UART_MINIMUM
              /*F**************************************************************************
              * NAME: uart_puts
              *----------------------------------------------------------------------------
              * PARAMS:   
              * sz: string zero terminated to print on UART
              * return: none
              *----------------------------------------------------------------------------
              * PURPOSE:
              * print a string on the UART
              *----------------------------------------------------------------------------
              * EXAMPLE:
              *----------------------------------------------------------------------------
              * NOTE: 
              * This function was added only to optimized uart_splash & uart_clrscr in VT100
              * mode (reduce code size).
              *----------------------------------------------------------------------------
              * REQUIREMENTS: 
              *****************************************************************************/
              void uart_puts (char _GenericType_ * sz)
              {
              register char   ch;
              
              for (;ch=*sz++;)
                {
                if (ch=='\n') uart_putchar('\r');
                uart_putchar(ch);
                }
              uart_putchar('\r');
              uart_putchar('\n');
              }
              
              
              /*F**************************************************************************
              * NAME: uart_clrscr
              *----------------------------------------------------------------------------
              * PARAMS:   
              * return: none
              *----------------------------------------------------------------------------
              * PURPOSE:
              * Clear VT100 terminal
              *----------------------------------------------------------------------------
              * EXAMPLE:
              * uart_clrsscr(); // CLS
              *----------------------------------------------------------------------------
              * NOTE: 
              *----------------------------------------------------------------------------
              * REQUIREMENTS: 
              *****************************************************************************/
              void uart_clrscr (void)
              {
              #ifndef DISABLE_VT100
              char _ConstType_   sz_init[]="\033c\033\133?25l"; // \033c=\033(2j=clear screen, \133?25l=no cursor
              uart_puts(sz_init);
              #else // 25 new lines
              uart_gotoxy(1,25);
              #endif
              }
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 3   

              
              #ifdef ENABLE_SPLASH_SCREEN
              bit state_uart_splash=0;
              
              /*F**************************************************************************
              * NAME: uart_splash
              *----------------------------------------------------------------------------
              * PARAMS:   
              * return: TRUE if terminated
              *----------------------------------------------------------------------------
              * PURPOSE:
              * Splash screen
              *----------------------------------------------------------------------------
              * EXAMPLE:
              *----------------------------------------------------------------------------
              * NOTE: 
              *----------------------------------------------------------------------------
              * REQUIREMENTS: 
              *****************************************************************************/
              bit uart_splash (void)
              {
              if (!state_uart_splash)
                {
                uart_clrscr();
                uart_puts(txt_logo_atmel);
                }
              return state_uart_splash=TRUE;
              }
              #endif
              
              
              /*F**************************************************************************
              * NAME: uart_gotoxy
              *----------------------------------------------------------------------------
              * PARAMS:
              * x: horizontal move 1..x, left to right
              * y: vertical move 1..y, top to bottom
              * return: none
              *----------------------------------------------------------------------------
              * PURPOSE:
              * Absolute move of virtual cursor: the next putchar will place the character
              * at position x,y.
              *----------------------------------------------------------------------------
              * EXAMPLE:
              *----------------------------------------------------------------------------
              * NOTE: 
              * x=0 => beginning of line
              *----------------------------------------------------------------------------
              * REQUIREMENTS: 
              * VT100 compatibility, except if x=0
              *****************************************************************************/
              void uart_gotoxy (Byte x, Byte y)
              {
              if (!x)
                {
                uart_putchar('\r');
                uart_putchar('\n');
                }
              else
                {
                #ifndef DISABLE_VT100
                uart_putchar(27);
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 4   

                uart_putchar(0x5B);
                if (y>9) uart_putchar('0'+(y/10));
                uart_putchar('0'+(y%10));
                uart_putchar(';');
                if (x>9) uart_putchar('0'+(x/10));
                uart_putchar('0'+(x%10));
                uart_putchar('H');
                #else
                uart_putchar('\r');
                for (;y--;) uart_putchar('\n');
                x--; // 0,1 => no space
                for (;x--;) uart_putchar(' ');
                #endif
                }
              }
              #endif // UART_MINIMUM
 195          
 196          
 197          /*F**************************************************************************
 198          * NAME: uart_test_hit
 199          *----------------------------------------------------------------------------
 200          * PARAMS:   
 201          * return: none
 202          *----------------------------------------------------------------------------
 203          * PURPOSE:
 204          * Update uart_hit variable: check if something is received on the uart
 205          *----------------------------------------------------------------------------
 206          * EXAMPLE:
 207          *----------------------------------------------------------------------------
 208          * NOTE: 
 209          *----------------------------------------------------------------------------
 210          * REQUIREMENTS: 
 211          *****************************************************************************/
 212          bit uart_test_hit (void)
 213          {
 214   1      return uart_hit=Uart_rx_ready();
 215   1      }
 216          
 217          
 218          /*F**************************************************************************
 219          * NAME: uart_init  
 220          *----------------------------------------------------------------------------
 221          * PARAMS: none
 222          * return: none 
 223          *----------------------------------------------------------------------------
 224          * PURPOSE: 
 225          * init UART & timer 1 in baudrate generator
 226          *****************************************************************************
 227          * NOTE: serial port mode: 8 bits with variable baud rate (9600 with 7.37Mhz)
 228          *****************************************************************************/
 229          bit uart_init (void)
 230          {
 231   1      Uart_hw_init(UART_CONFIG);
 232   1      Uart_set_baudrate(BAUDRATE);
 233   1      Uart_enable();
 234   1      return TRUE;
 235   1      }
 236          
 237          
 238          /*F**************************************************************************
 239          * NAME: uart_putchar
 240          *----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 5   

 241          * PARAMS:   
 242          * ch: character to print on UART
 243          * return: character printed
 244          *----------------------------------------------------------------------------
 245          * PURPOSE:
 246          * print a character on the UART
 247          *----------------------------------------------------------------------------
 248          * EXAMPLE:
 249          *----------------------------------------------------------------------------
 250          * NOTE: 
 251          *----------------------------------------------------------------------------
 252          * REQUIREMENTS: 
 253          *****************************************************************************/
 254          char uart_putchar (char ch)
 255          {
 256   1      while(!Uart_tx_ready());
 257   1      Uart_set_tx_busy(); // Set Busy flag before sending (always)
 258   1      Uart_send_byte(ch);
 259   1      return ch;
 260   1      }
 261          
 262          
 263          
 264          /*F**************************************************************************
 265          * NAME: uart_getchar
 266          *----------------------------------------------------------------------------
 267          * PARAMS:   
 268          * return: character read on uart.
 269          *----------------------------------------------------------------------------
 270          * PURPOSE:
 271          * Get a character from the UART
 272          *----------------------------------------------------------------------------
 273          * EXAMPLE:
 274          *----------------------------------------------------------------------------
 275          * NOTE: 
 276          *----------------------------------------------------------------------------
 277          * REQUIREMENTS: 
 278          *****************************************************************************/
 279          char uart_getchar (void)
 280          {
 281   1      
 282   1      register char c;
 283   1      
 284   1      while(!Uart_rx_ready());
 285   1      c = Uart_get_byte();
 286   1      Uart_ack_rx_byte();
 287   1      return c; 
 288   1      }
 289          /*F**************************************************************************
 290          * NAME: uart_getchar
 291          *----------------------------------------------------------------------------
 292          * PARAMS:   
 293          * return: character read on uart.
 294          *----------------------------------------------------------------------------
 295          * PURPOSE:
 296          * Get a character from the UART
 297          *----------------------------------------------------------------------------
 298          * EXAMPLE:
 299          *----------------------------------------------------------------------------
 300          * NOTE: 
 301          *----------------------------------------------------------------------------
 302          * REQUIREMENTS: 
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 6   

 303          *****************************************************************************/
 304          void uart_set_baudrate(long int bdr)      
 305          {
 306   1       switch (bdr)
 307   1       {
 308   2        case 1200 :
 309   2         brg2_init = 65120;
 310   2         Set_timer2_x1_mode();
 311   2          break;
 312   2        case 2400 :
 313   2         brg2_init = 65328;
 314   2         Set_timer2_x1_mode();
 315   2          break;
 316   2          case 4800 :
 317   2         brg2_init = 65432;
 318   2         Set_timer2_x1_mode();
 319   2          break;
 320   2        case 9600 :
 321   2         brg2_init = 65484;
 322   2         Set_timer2_x1_mode();
 323   2          break;
 324   2        case 19200 :
 325   2         brg2_init = 65510;
 326   2         Set_timer2_x1_mode();
 327   2          break;
 328   2        case 28800 :
 329   2         brg2_init = 65519;
 330   2         Set_timer2_x1_mode();
 331   2          break;
 332   2        case 38400 :
 333   2         brg2_init = 65523;
 334   2         Set_timer2_x1_mode();
 335   2          break;
 336   2        case 57600 :
 337   2         brg2_init = 65527;
 338   2         Set_timer2_x1_mode();
 339   2      
 340   2          break;
 341   2        case 115200 :
 342   2         brg2_init = 65527;
 343   2         Set_timer2_x2_mode();
 344   2           Uart_conf_x2();
 345   2          break;
 346   2        default :
 347   2          break;
 348   2         }
 349   1      
 350   1           RCAP2H=(brg2_init>>8); /* Set autoreload value for T2 according to FOSC & BAUDRATE */
 351   1           RCAP2L=brg2_init;
 352   1           T2CON=0x34; /* Timer2 in Baud rate Generator mode */
 353   1           TR2  =1; /* Start timer 2 */
 354   1      }
 355          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   UART_LIB                                                          09/19/2016 17:02:23 PAGE 7   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
